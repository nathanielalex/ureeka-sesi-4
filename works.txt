"use client";

import { Button } from "@/components/ui/button";
import { useState } from "react";

// interface WeatherData {
//   error?: string; // error is optional because data may or may not have it
//   data: WeatherResponse;
// }

interface WeatherResponse {
  request: {
    type: string;
    query: string;
    language: string;
    unit: string;
  };
  location: {
    name: string;
    country: string;
    region: string;
    lat: string;
    lon: string;
    timezone_id: string;
    localtime: string;
    localtime_epoch: number;
    utc_offset: string;
  };
  current: {
    observation_time: string;
    temperature: number;
    weather_code: number;
    weather_icons: string[];
    weather_descriptions: string[];
    astro: {
      sunrise: string;
      sunset: string;
      moonrise: string;
      moonset: string;
      moon_phase: string;
      moon_illumination: number;
    };
    air_quality: {
      co: string;
      no2: string;
      o3: string;
      so2: string;
      pm2_5: string;
      pm10: string;
      "us-epa-index": string;
      "gb-defra-index": string;
    };
    wind_speed: number;
    wind_degree: number;
    wind_dir: string;
    pressure: number;
    precip: number;
    humidity: number;
    cloudcover: number;
    feelslike: number;
    uv_index: number;
    visibility: number;
  };
}

export default function Weather() {
  const [weather, setWeather] = useState<WeatherResponse>();
  const [location, setLocation] = useState("");
  // const [loading, setLoading] = useState(true);

  const getWeather = async () => {
    try {
      const res = await fetch(
        `/api/weather?location=${encodeURIComponent(location)}`
      );
      const data = await res.json();
      console.log(data);
      setWeather(data);
      console.log(weather);
    } catch (error) {
      console.error("Error fetching weather:", error);
    } finally {
      // setLoading(false);
    }
  };

  return (
    <div>
      <input
        type="text"
        placeholder="Enter location"
        value={location}
        onChange={(e) => setLocation(e.target.value)}
      />
      <Button onClick={getWeather}>get weather</Button>

      {weather ? (
        <div>
          <img src={weather.current.weather_icons[0]} />
          <pre>{JSON.stringify(weather, null, 2)}</pre>
        </div>
      ) : (
        <p>Loading weather...</p>
      )}
    </div>
  );
}




